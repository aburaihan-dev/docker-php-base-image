# Optimized Alpine-based image for Laravel 11
FROM php:8.4-fpm-alpine3.19 AS base

# Install runtime dependencies (Alpine packages are much smaller)
RUN apk add --no-cache \
    nginx \
    curl \
    bash \
    git \
    zip \
    unzip \
    supervisor \
    procps \
    # Runtime libraries for PHP extensions
    rabbitmq-c \
    libzip \
    libpng \
    libjpeg-turbo \
    freetype \
    icu-libs \
    oniguruma \
    && rm -rf /var/cache/apk/*

# Install build dependencies, compile PHP extensions, then remove them
RUN apk add --no-cache --virtual .build-deps \
    $PHPIZE_DEPS \
    libzip-dev \
    openssl-dev \
    rabbitmq-c-dev \
    libpng-dev \
    libjpeg-turbo-dev \
    freetype-dev \
    icu-dev \
    oniguruma-dev \
    linux-headers \
    && docker-php-ext-configure gd --with-freetype --with-jpeg \
    && docker-php-ext-install -j$(nproc) \
      zip \
      sockets \
      pcntl \
      mysqli \
      pdo \
      pdo_mysql \
      opcache \
      intl \
      gd \
      exif \
      bcmath \
    && pecl install amqp redis \
    && docker-php-ext-enable amqp redis \
    # Clean up build dependencies (saves ~100MB+)
    && apk del .build-deps \
    && rm -rf /tmp/* /var/cache/apk/*

# Install Composer from official image
COPY --from=composer:2 /usr/bin/composer /usr/bin/composer

# Copy entrypoint script that generates PHP config from ENV vars
COPY configs/docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh
RUN chmod +x /usr/local/bin/docker-entrypoint.sh

# PHP-FPM pool configuration optimized for production
RUN { \
      echo "[www]"; \
      echo "pm = dynamic"; \
      echo "pm.max_children = 50"; \
      echo "pm.start_servers = 10"; \
      echo "pm.min_spare_servers = 5"; \
      echo "pm.max_spare_servers = 15"; \
      echo "pm.max_requests = 500"; \
      echo "pm.status_path = /fpm-status"; \
      echo "ping.path = /fpm-ping"; \
      echo "ping.response = pong"; \
      echo "catch_workers_output = yes"; \
      echo "decorate_workers_output = no"; \
    } >> /usr/local/etc/php-fpm.d/www.conf

# Configure Nginx for Laravel (Alpine uses different paths)
RUN rm -f /etc/nginx/http.d/default.conf && \
    mkdir -p /var/log/nginx /var/cache/nginx /run/nginx && \
    chown -R nginx:nginx /var/log/nginx /var/cache/nginx /var/lib/nginx /run/nginx

# Copy Nginx configuration
COPY configs/nginx/laravel.conf /etc/nginx/http.d/laravel.conf

# Configure Supervisor (Alpine uses different paths)
RUN mkdir -p /var/log/supervisor /etc/supervisor/conf.d

# Copy Supervisor configuration
COPY configs/supervisor/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Prepare application directories with proper permissions
# Note: www-data user and group already exist in php:8.2-fpm-alpine
RUN mkdir -p /app/public /app/storage /app/bootstrap/cache && \
    chown -R www-data:www-data /app

# Set default environment variables (can be overridden at runtime)
ENV WEB_DOCUMENT_ROOT=/app/public \
    PHP_MEMORY_LIMIT=256M \
    PHP_MAX_EXECUTION_TIME=60 \
    PHP_POST_MAX_SIZE=100M \
    PHP_UPLOAD_MAX_FILESIZE=100M \
    PHP_TIMEZONE=UTC \
    PHP_DISPLAY_ERRORS=Off \
    OPCACHE_ENABLE=1 \
    OPCACHE_MEMORY=256 \
    OPCACHE_INTERNED_STRINGS=16 \
    OPCACHE_MAX_FILES=20000 \
    OPCACHE_VALIDATE_TIMESTAMPS=0

WORKDIR /app

# Set entrypoint
ENTRYPOINT ["/usr/local/bin/docker-entrypoint.sh"]

# Healthcheck
HEALTHCHECK --interval=30s --timeout=3s --start-period=40s --retries=3 \
  CMD curl -f http://localhost/fpm-ping || exit 1

# Expose HTTP port
EXPOSE 80

# Start supervisor (via entrypoint)
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
